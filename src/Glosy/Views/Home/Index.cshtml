@using Glosy.Resources
@using Microsoft.Extensions.Localization
﻿@using Glosy.Constants;
@model AudioProcessingModel
@inject IStringLocalizer<CommonResources> Localizer

@{
    ViewData["Title"] = "Home Page";
}

<div class="container">
    <h1 class="display-4 mb-5">Glosy</h1>

    @using (Html.BeginForm("ProcessVoice", "Home", FormMethod.Post, new
    { enctype = "multipart/form-data" }))
    {
        <div class="d-grid gap-3">

            <div>
                @Html.LabelFor(m => m.SourceFile, @Localizer.GetString("SourceFileLabel"), new { @class = "h5 mb-3" })
                <div class="mb-3">
                    <label>@Localizer.GetString("RecordingLabel")</label>
                    <div>
                        <button id="startRecording" class="btn btn-outline-secondary" type="button">
                            <i class="bi bi-record-fill" style="color: #d44054"></i>
                            @Localizer.GetString("StartRecordingText")
                        </button>
                        <button id="stopRecording" class="btn btn-outline-secondary" disabled type="button">
                            <i class="bi bi-stop-fill"></i>
                            @Localizer.GetString("StopRecordingText")
                        </button>
                    </div>
                </div>

                <div class="mb-3">
                    <label>@Localizer.GetString("UploadSourceAudioLabel")</label>
                    <div class="input-container">
                        <div class="input-group mb-2">
                            @Html.TextBoxFor(m => m.SourceFile, new { type = "file", accept = ".wav", @class = "form-control custom-file-input", id = "sourceFile" })
                            <button class="btn btn-outline-secondary clear-file-input" id="clearRecodringButton" type="button">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <audio id="sourceAudioPreview" class="audio-preview" controls style="display: none;"></audio>
                    </div>
                </div>

                <div class="mb-3">
                    <label>@Localizer.GetString("TextPromptLabel")</label>
                    @Html.TextAreaFor(m => m.TextPrompt, new { type = "file", accept = ".wav", @class = "form-control mb-3", @placeholder = @Localizer.GetString("TextPromptPlaceholder"), id = "textPromptArea" })
                </div>

            </div>

            <div class="mb-3">
                @Html.LabelFor(m => m.TargetFile, @Localizer.GetString("TargetFileLabel"), new { @class = "h5 mb-3" })
                <div class="input-container">
                    <div class="input-group mb-2">
                        @Html.TextBoxFor(m => m.TargetFile, new { type = "file", required = "required", accept = ".wav", @class = "form-control", id = "targetFile" })
                        <button class="btn btn-outline-secondary clear-file-input" type="button">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <audio id="targetAudioPreview" class="audio-preview" controls style="display: none;"></audio>
                </div>
            </div>


            <button class="btn btn-primary mb-3" type="submit" title="@Localizer.GetString("SubmitButtonTitle")">@Localizer.GetString("SubmitButtonText")</button>

            <div id="loadingIndicator" class="text-center" style="display: none;">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">@Localizer.GetString("BusyIndicatorText")</span>
                </div>
                <p>@Localizer.GetString("BusyIndicatorText")</p>
            </div>

            <div id="resultContainer" style="display: none;">
                @Html.LabelFor(m => m.OutputFile, @Localizer.GetString("OutputFileLabel"), new { @class = "h5 mb-3" })
                <div id="outputAudioPreview"></div>
            </div>

        </div>
    }

</div>

<script>
    function createAudioPreview(inputId, previewId) {
        var input = document.getElementById(inputId);
        var preview = $("#" + previewId);

        input.addEventListener("change", function() {
            var file = input.files[0];
            if (file) {
                //var audio = document.createElement("audio");
                // audio.controls = true;
                var objectURL = URL.createObjectURL(file);
                preview.attr('src', objectURL);
                preview.show();
                // preview.innerHTML = '';
                // preview.appendChild(audio);
            }
        });
    }

    createAudioPreview('sourceFile', 'sourceAudioPreview');
    createAudioPreview('targetFile', 'targetAudioPreview');
</script>

<script>
    document.querySelectorAll('.clear-file-input').forEach(button => {
        button.addEventListener('click', function() {
            const fileInput = this.closest('.input-group').querySelector('input[type="file"]');
            if (fileInput) {
                fileInput.value = '';
            }

            const audioPreview = this.closest('.input-container').querySelector('.audio-preview');
            if (audioPreview) {
                audioPreview.style.display = "none";
            }

            toggleTextPromptInput();
        });
    });
</script>

<script>
        document.querySelector("form").addEventListener("submit", function(event) {
        event.preventDefault();

        $("#loadingIndicator").show();
        $("#resultContainer").hide();

        var formData = new FormData(this);

        fetch(this.action, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            $("#loadingIndicator").hide();

            if (data.audioUrl) {
                var preview = document.getElementById("outputAudioPreview");
                preview.innerHTML = '';

                var audio = document.createElement("audio");
                audio.controls = true;
                audio.src = data.audioUrl;
                preview.appendChild(audio);
                $("#resultContainer").show();
            }
        })
        .catch(error => {
            $("#loadingIndicator").hide();
            console.error("Error:", error)
        });
    });
</script>

<script>
    function toggleSourceFileInput() {
        var textArea = document.getElementById("textPromptArea");
        var fileInput = document.getElementById("sourceFile");

        if (textArea.value.trim().length > 0) {
            fileInput.disabled = true;
        } else {
            fileInput.disabled = false;
        }
    }

    function toggleTextPromptInput() {
        var textArea = document.getElementById("textPromptArea");
        var fileInput = document.getElementById("sourceFile");

        // Disable textarea if a file is selected
        if (fileInput.files.length > 0) {
            textArea.disabled = true;
        } else {
            textArea.disabled = false;
        }
    }

    document.getElementById("textPromptArea").addEventListener("input", toggleSourceFileInput);
    document.getElementById("sourceFile").addEventListener("change", toggleTextPromptInput);

    // // Run on page load in case there is already text
    // toggleSourceFileInput();
</script>


<style>
    label {
        margin-bottom: 10px;
    }
</style>

<script>
    let mediaRecorder;
    let audioChunks = [];
    let audioBlob;
    let audioURL;
    let audio = document.getElementById("sourceAudioPreview");

    document.getElementById("startRecording").addEventListener("click", startRecording);
    document.getElementById("stopRecording").addEventListener("click", stopRecording);

    async function startRecording() {
        audioChunks = []
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        const audioMimeType = '@AudioConstants.RecordingMimeType';

        mediaRecorder = new MediaRecorder(stream);

        mediaRecorder.ondataavailable = event => {
            audioChunks.push(event.data);
        };

        mediaRecorder.start();
        document.getElementById("stopRecording").disabled = false;
        document.getElementById("startRecording").disabled = true;

        mediaRecorder.onstop = () => {
            audioBlob = new Blob(audioChunks, { type: audioMimeType });
            audioURL = URL.createObjectURL(audioBlob);
            audio.src = audioURL;

            document.getElementById("stopRecording").disabled = true;
            document.getElementById("startRecording").disabled = false;

            const fileInput = document.getElementById("sourceFile");
            const file = new File([audioBlob], "recorded.wav", { type: audioMimeType });

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            fileInput.files = dataTransfer.files;

            document.getElementById("stopRecording").disabled = true;
            document.getElementById("startRecording").disabled = false;
            document.getElementById("textPromptArea").disabled = true;
        };
    }

    function stopRecording() {
        mediaRecorder.stop();
        $("#sourceAudioPreview").show();
    }
</script>