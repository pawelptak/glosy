@using Glosy.Resources
@using Microsoft.Extensions.Localization
﻿@using Glosy.Constants;
@model AudioProcessingModel
@inject IStringLocalizer<CommonResources> Localizer

@{
    ViewData["Title"] = "Home Page";
}

<div class="container mt-5">
    <partial name="_Logo" />

    @using (Html.BeginForm("ProcessVoice", "Home", FormMethod.Post, new
    { enctype = "multipart/form-data" }))
    {
        <div class="d-grid gap-3">

            <div class="mb-5">
                @Html.LabelFor(m => m.SourceFile, @Localizer.GetString("SourceFileLabel"), new { @class = "h5 mb-3" })
                <div class="mb-3">
                    <label>@Localizer.GetString("UploadAudioLabel")</label>
                    <div class="input-container">
                        <div class="input-group mb-2">
                            @Html.TextBoxFor(m => m.SourceFile, new { type = "file", accept = ".wav, .mp3", @class = "form-control custom-file-input", id = "sourceFile" })
                            <button id="startRecordingSource" class="btn btn-outline-secondary recording-button start-recording-button" type="button">
                                <i class="bi bi-mic"></i>
                                <span class="hide-on-mobile">@Localizer.GetString("StartRecordingText")</span>
                            </button>
                            <button id="stopRecordingSource" class="btn btn-outline-secondary recording-button stop-recording-button" style="display: none;" type="button">
                                <i class="bi bi-stop-fill"></i>
                                <span class="hide-on-mobile">@Localizer.GetString("StopRecordingText")</span>
                            </button>
                            <button class="btn btn-outline-danger clear-file-input recording-button" id="clearRecodringButton" type="button">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <audio id="sourceAudioPreview" class="audio-preview" controls style="display: none;"></audio>
                    </div>
                </div>

                <div class="mb-3">
                    <label>@Localizer.GetString("TextPromptLabel")</label>
                    @Html.TextAreaFor(m => m.TextPrompt, new { type = "file", accept = ".wav", @class = "form-control mb-3", @placeholder = @Localizer.GetString("TextPromptPlaceholder"), id = "textPromptArea" })
                </div>

            </div>

            <div>
                @Html.LabelFor(m => m.TargetFile, @Localizer.GetString("TargetFileLabel"), new { @class = "h5 mb-3" })
                <div class="mb-3">
                    <label>@Localizer.GetString("UploadAudioLabel")</label>
                    <div class="input-container">
                        <div class="input-group mb-2">
                            @Html.TextBoxFor(m => m.TargetFile, new { type = "file", required = "required", accept = ".wav, .mp3", @class = "form-control", id = "targetFile" })
                            <button id="startRecordingTarget" class="btn btn-outline-secondary recording-button start-recording-button" type="button">
                                <i class="bi bi-mic"></i>
                                <span class="hide-on-mobile">@Localizer.GetString("StartRecordingText")</span>
                            </button>
                            <button id="stopRecordingTarget" class="btn btn-outline-secondary recording-button stop-recording-button" style="display: none;" type="button">
                                <i class="bi bi-stop-fill"></i>
                                <span class="hide-on-mobile">@Localizer.GetString("StopRecordingText")</span>
                            </button>
                            <button class="btn btn-outline-danger clear-file-input recording-button" type="button">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <audio id="targetAudioPreview" class="audio-preview" controls style="display: none;"></audio>
                    </div>
                </div>
            </div>


            <button class="btn btn-primary mb-5" type="submit" title="@Localizer.GetString("SubmitButtonTitle")">@Localizer.GetString("SubmitButtonText")</button>

            <div id="loadingIndicator" class="text-center" style="display: none;">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">@Localizer.GetString("BusyIndicatorText")</span>
                </div>
                <p>@Localizer.GetString("BusyIndicatorText")</p>
            </div>

            <div id="resultContainer" style="display: none;">
                @Html.LabelFor(m => m.OutputFile, @Localizer.GetString("OutputFileLabel"), new { @class = "h5 mb-3" })
                <audio id="outputAudioPreview" class="audio-preview" controls></audio>
            </div>

            <div id="errorContainer" class="text-center" style="display: none; color: red;"></div>
        </div>
    }

</div>

<script>
    function createAudioPreview(inputId, previewId) {
        var input = document.getElementById(inputId);
        var preview = $("#" + previewId);

        input.addEventListener("change", function() {
            var file = input.files[0];
            if (file) {
                //var audio = document.createElement("audio");
                // audio.controls = true;
                var objectURL = URL.createObjectURL(file);
                preview.attr('src', objectURL);
                preview.show();
                // preview.innerHTML = '';
                // preview.appendChild(audio);
            }
        });
    }

    createAudioPreview('sourceFile', 'sourceAudioPreview');
    createAudioPreview('targetFile', 'targetAudioPreview');
</script>

<script>
    document.querySelectorAll('.clear-file-input').forEach(button => {
        button.addEventListener('click', function() {
            const fileInput = this.closest('.input-group').querySelector('input[type="file"]');
            if (fileInput) {
                fileInput.value = '';
            }

            const audioPreview = this.closest('.input-container').querySelector('.audio-preview');
            if (audioPreview) {
                audioPreview.style.display = "none";
            }

            toggleTextPromptInput();
        });
    });
</script>

<script>
        document.querySelector("form").addEventListener("submit", function(event) {
        event.preventDefault();

        $("#loadingIndicator").show();
        $("#resultContainer").hide();
        $("#errorContainer").hide();

        var formData = new FormData(this);

        fetch(this.action, {
            method: "POST",
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            $("#loadingIndicator").hide();

            if (data.audioUrl) {
                var preview = document.getElementById("outputAudioPreview");
                preview.src = data.audioUrl;
                preview.load();
                $("#resultContainer").show();
            }
            else {
                $("#loadingIndicator").hide();
                $("#errorContainer").text('@Html.Raw(Localizer.GetString("ProcessingErrorMessage")): ' + data.error).show();
                console.error("Error:", data.error);
            }
        })
        .catch(error => {
            $("#loadingIndicator").hide();
            $("#errorContainer").text('@Html.Raw(Localizer.GetString("ProcessingErrorMessage"))').show();
            console.error("Error:", error);
        });
    });
</script>

<script>
    function toggleSourceFileInput() {
        var textArea = document.getElementById("textPromptArea");
        var fileInput = document.getElementById("sourceFile");
        var startRecordingButton = document.getElementById("startRecordingSource");

        if (textArea.value.trim().length > 0) {
            fileInput.disabled = true;
            startRecordingButton.disabled = true;
        } else {
            fileInput.disabled = false;
            startRecordingButton.disabled = false;
        }
    }

    function toggleTextPromptInput() {
        var textArea = document.getElementById("textPromptArea");
        var fileInput = document.getElementById("sourceFile");

        // Disable textarea if a file is selected
        if (fileInput.files.length > 0) {
            textArea.disabled = true;
        } else {
            textArea.disabled = false;
        }
    }

    document.getElementById("textPromptArea").addEventListener("input", toggleSourceFileInput);
    document.getElementById("sourceFile").addEventListener("change", toggleTextPromptInput);

    // // Run on page load in case there is already text
    // toggleSourceFileInput();
</script>

<script>
    let mediaRecorders = {};
    let activeStreams = {};
    let audioBlobs = {};

    // This is a small miracle that it works on iOS, hence all these stopping streams, revoking URLs and timeouts
    async function startRecording(recorderId, startButtonId, stopButtonId, audioPreviewId, audioFileInputId, recordingName) {
        stopAllStreams();

        let audioChunks = [];
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });

        activeStreams[recorderId] = stream;

        const audioMimeType = '@AudioConstants.RecordingMimeType';
        const mediaRecorder = new MediaRecorder(stream);
        mediaRecorders[recorderId] = mediaRecorder;

        mediaRecorder.ondataavailable = event => {
            audioChunks.push(event.data);
        };

        mediaRecorder.start();
        $('#'+stopButtonId).show();
        $('#'+startButtonId).hide();
        // document.getElementById(stopButtonId).disabled = false;
        // document.getElementById(startButtonId).disabled = true;

        mediaRecorder.onstop = async () => {
            let audioBlob = new Blob(audioChunks, { type: audioMimeType });

            audioBlobs[recorderId] = audioBlob;

            stopStream(recorderId);

            let audioURL = URL.createObjectURL(audioBlob);
            let audio = document.getElementById(audioPreviewId);

            if (audio.src) {
                URL.revokeObjectURL(audio.src);
            }

            setTimeout(() => {
                audio.src = audioURL;
                audio.load();
            }, 50);

            // document.getElementById(stopButtonId).disabled = true;
            // document.getElementById(startButtonId).disabled = false;

            $('#'+stopButtonId).hide();
            $('#'+startButtonId).show();

            const fileInput = document.getElementById(audioFileInputId);
            const file = new File([audioBlob], recordingName, { type: audioMimeType });

            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(file);
            fileInput.files = dataTransfer.files;
        };
    }

    function stopAllStreams() {
        Object.keys(mediaRecorders).forEach(recorderId => {
            if (mediaRecorders[recorderId] && mediaRecorders[recorderId].state !== "inactive") {
                mediaRecorders[recorderId].stop();
            }
        });

        Object.keys(activeStreams).forEach(recorderId => stopStream(recorderId));
    }

    function stopStream(recorderId) {
        if (activeStreams[recorderId]) {
            activeStreams[recorderId].getTracks().forEach(track => track.stop());
            delete activeStreams[recorderId];
        }
    }

    function stopRecording(recorderId, audioPreviewId) {
        if (mediaRecorders[recorderId]) {
            mediaRecorders[recorderId].stop();
            delete mediaRecorders[recorderId];

            let audio = document.getElementById(audioPreviewId);
            if (audioBlobs[recorderId]) {
                let audioURL = URL.createObjectURL(audioBlobs[recorderId]);

                if (audio.src) {
                    URL.revokeObjectURL(audio.src);
                }

                setTimeout(() => {
                    audio.src = audioURL;
                    audio.load();
                }, 50);
            }
            $('#' + audioPreviewId).show();
        }
    }

    const startSourceRecordingButtonId = "startRecordingSource";
    const stopSourceRecordingButtonId = "stopRecordingSource";
    const sourcePreviewId = "sourceAudioPreview";
    const sourceInputId = "sourceFile";

    document.getElementById(startSourceRecordingButtonId).addEventListener("click", () => startRecording("source", startSourceRecordingButtonId, stopSourceRecordingButtonId, sourcePreviewId, sourceInputId, "source.wav"));
    document.getElementById(startSourceRecordingButtonId).addEventListener("click", () => document.getElementById("textPromptArea").disabled = true);
    document.getElementById(stopSourceRecordingButtonId).addEventListener("click", () => stopRecording("source", sourcePreviewId));

    const startTargetRecordingButtonId = "startRecordingTarget";
    const stopTargetRecordingButtonId = "stopRecordingTarget";
    const targetPreviewId = "targetAudioPreview";
    const targetnputId = "targetFile";

    document.getElementById(startTargetRecordingButtonId).addEventListener("click", () => startRecording("target", startTargetRecordingButtonId, stopTargetRecordingButtonId, targetPreviewId, targetnputId, "target.wav"));
    document.getElementById(stopTargetRecordingButtonId).addEventListener("click", () => stopRecording("target", targetPreviewId));
</script>